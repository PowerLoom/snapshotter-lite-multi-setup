name: Publish to PyPI and TestPyPI

on:
  push:
    branches:
      - develop  # Publish to TestPyPI on every push to this branch
    tags:
      - 'v*'  # Publish to PyPI on version tags
  pull_request:
    branches:
      - master
    types: [opened, synchronize]
  workflow_dispatch:
    inputs:
      publish_to_testpypi:
        description: 'Publish to TestPyPI'
        required: false
        default: true
        type: boolean
      publish_to_pypi:
        description: 'Publish to PyPI (only works on tags)'
        required: false
        default: false
        type: boolean

permissions:
  contents: read

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'

    - name: Install uv
      uses: astral-sh/setup-uv@v5
      with:
        enable-cache: true
        cache-dependency-path: uv.lock

    - name: Install dependencies and project
      run: uv sync --frozen

    - name: Check code formatting
      run: |
        uv run black --check snapshotter_cli/
        uv run isort --check-only snapshotter_cli/

    - name: Run type checking
      run: uv run mypy snapshotter_cli/ || true  # Allow mypy to fail for now

    - name: Run tests
      run: uv run pytest tests/ -v || echo "No tests found, continuing..."

    - name: Test CLI
      run: |
        uv run powerloom-snapshotter-cli --version
        uv run powerloom-snapshotter-cli --help
        uv run powerloom --help
        uv run snapshotter --help

  build:
    name: Build Distribution Packages
    needs: test
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'

    - name: Install uv
      uses: astral-sh/setup-uv@v5
      with:
        enable-cache: true
        cache-dependency-path: uv.lock

    - name: Set version for TestPyPI
      if: (github.event_name == 'pull_request' || (github.event_name == 'push' && github.ref == 'refs/heads/develop')) && !startsWith(github.ref, 'refs/tags/')
      run: |
        # Get current version from pyproject.toml
        CURRENT_VERSION=$(grep '^version' pyproject.toml | cut -d'"' -f2)

        # Create appropriate dev version
        if [[ "${{ github.event_name }}" == "pull_request" ]]; then
          # For PRs, include PR number in the dev suffix
          # Format: 0.1.0.dev20250718230122+pr60 (using local version identifier)
          DEV_VERSION="${CURRENT_VERSION}.dev$(date +%Y%m%d%H%M%S)+pr${{ github.event.pull_request.number }}"
        else
          # For develop branch pushes
          DEV_VERSION="${CURRENT_VERSION}.dev$(date +%Y%m%d%H%M%S)"
        fi

        echo "Setting version to $DEV_VERSION for TestPyPI"
        # Update version in pyproject.toml
        sed -i.bak "s/^version = \".*\"/version = \"$DEV_VERSION\"/" pyproject.toml
        rm pyproject.toml.bak

    - name: Build package
      run: uv build

    - name: Check build artifacts
      run: |
        ls -la dist/
        # Verify wheel and sdist were created
        test -f dist/*.whl
        test -f dist/*.tar.gz

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: python-package-distributions
        path: dist/

  publish-to-testpypi:
    name: Publish to TestPyPI
    needs: build
    runs-on: ubuntu-latest
    # Publish to TestPyPI on:
    # - Every push to develop branch
    # - Pull requests to master branch
    # - Manual workflow dispatch with publish_to_testpypi=true
    if: |
      (github.event_name == 'pull_request' && github.base_ref == 'master') ||
      (github.event_name == 'push' && github.ref == 'refs/heads/develop') ||
      (github.event_name == 'workflow_dispatch' && github.event.inputs.publish_to_testpypi == 'true')

    environment:
      name: testpypi
      url: https://test.pypi.org/p/powerloom-snapshotter-cli

    permissions:
      id-token: write  # IMPORTANT: mandatory for trusted publishing

    steps:
    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        name: python-package-distributions
        path: dist/

    - name: List distribution files
      run: ls -la dist/

    - name: Publish to TestPyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        repository-url: https://test.pypi.org/legacy/
        skip-existing: true  # Skip if version already exists
        verbose: true

  publish-to-pypi:
    name: Publish to PyPI
    needs: [build, publish-to-testpypi]
    runs-on: ubuntu-latest
    # Only publish to PyPI on version tags
    if: |
      startsWith(github.ref, 'refs/tags/v') ||
      (github.event_name == 'workflow_dispatch' && github.event.inputs.publish_to_pypi == 'true' && startsWith(github.ref, 'refs/tags/'))

    environment:
      name: pypi
      url: https://pypi.org/p/powerloom-snapshotter-cli

    permissions:
      id-token: write  # IMPORTANT: mandatory for trusted publishing

    steps:
    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        name: python-package-distributions
        path: dist/

    - name: List distribution files
      run: ls -la dist/

    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        verbose: true
        # No skip-existing for production PyPI - we want it to fail if version exists

  create-github-release:
    name: Create GitHub Release
    needs: publish-to-pypi
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')

    permissions:
      contents: write

    steps:
    - uses: actions/checkout@v4

    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        name: python-package-distributions
        path: dist/

    - name: Create Release Notes
      run: |
        cat > release_notes.md << 'EOF'
        ## Powerloom Snapshotter CLI ${{ github.ref_name }}

        ### Installation from PyPI

        ```bash
        pip install powerloom-snapshotter-cli
        ```

        ### Installation from this release

        ```bash
        pip install https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/powerloom_snapshotter_cli-${VERSION}-py3-none-any.whl
        ```

        ### What's Changed

        See the [full changelog](https://github.com/${{ github.repository }}/compare/...v${VERSION})

        ### Verification

        After installation, verify with:
        ```bash
        powerloom-snapshotter-cli --version
        ```
        EOF

        # Extract version from tag
        VERSION=${GITHUB_REF_NAME#v}
        sed -i "s/\${VERSION}/$VERSION/g" release_notes.md

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v2
      with:
        draft: false
        prerelease: ${{ contains(github.ref_name, 'rc') || contains(github.ref_name, 'beta') || contains(github.ref_name, 'alpha') }}
        body_path: release_notes.md
        files: |
          dist/*
